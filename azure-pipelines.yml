# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
- group: variables-cluster
- name: createVar
  value: $[eq(variables['create-cluster'], 'True')]
- name: installVar
  value: $[eq(variables['install-cluster'], 'True')]
- name: deleteVar
  value: $[eq(variables['delete-cluster'], 'True')]


trigger: none

pool:
  vmImage: ubuntu-latest

stages:
- stage: BuildAKSTerraform
  jobs:
  - job: BuildAKSTerraform
    steps:
    - task: InstallSSHKey@0
      displayName: Installing SSH key
      inputs:
        knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: '$(myPubKey)'
        sshKeySecureFile: 'id_rsa'

    - task: HelmInstaller@0
      inputs:
        helmVersion: '2.14.1'
        installKubectl: true
    - task: TerraformTaskV2@2
      displayName: Terraform init 
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8s/'
        backendServiceArm: 'Essai gratuit(e66d562c-9e74-47b7-a847-c6d192e8b54b)'
        backendAzureRmResourceGroupName: 'TFRresourceGroup'
        backendAzureRmStorageAccountName: 'newdavblob'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV2@2
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8s/'
    - task: TerraformTaskV2@2
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8s/'
        commandOptions: '-out out.plan'
        environmentServiceNameAzureRM: 'Essai gratuit(e66d562c-9e74-47b7-a847-c6d192e8b54b)'
      env:
        TF_VAR_client_id: $(service-principal-appid)
        TF_VAR_client_secret: $(service-principal-password)
    
    - task: TerraformTaskV2@2
      displayName: Terraform apply
      name: terraformApply
      condition: eq(variables.createVar, True)
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8s/'
        commandOptions: 'out.plan'
        environmentServiceNameAzureRM: 'Essai gratuit(e66d562c-9e74-47b7-a847-c6d192e8b54b)'
    - task: AzureCLI@2
      displayName: Installing tools
      condition: eq(variables.installVar, True)
      inputs:
        azureSubscription: 'Essai gratuit(e66d562c-9e74-47b7-a847-c6d192e8b54b)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e

          CLUSTER_NAME=$(cat $(terraformApply.jsonOutputVariablesPath) | jq '.cluster_name.value' -r)
          RESOURCE_GROUP_NAME=$(cat $(terraformApply.jsonOutputVariablesPath) | jq '.resource_group_name.value' -r)
          
          echo "- acquiring credentials for cluster"
          az aks get-credentials -n $CLUSTER_NAME -g $RESOURCE_GROUP_NAME

          echo "- installing fluxcd in agent"
          curl -s https://fluxcd.io/install.sh | sudo bash

          echo "- Validating flux pre-requisites"
          flux check --pre

          echo "- pulling git repo"
          git clone $(deployment-repo)
          cd teoSchool-david-deployment

          echo "- Installing docker app namespace"
          kubectl apply -f docker-app/dockercoins-namespace.yaml

          echo "- Bootstrap Flux components"
          flux bootstrap github \
            --owner=$GITHUB_USER \
            --repository=$GITHUB_REPO \
            --branch=master \
            --path=./clusters/$CLUSTER_NAME

          ls -alh ./clusters/k8stest/

          echo "- Creating flux source"
          flux create source git prod \
            --url=https://github.com/daespinel/teoschooldavid \
            --branch=main \
            --interval=30s \
            --export > ./clusters/$CLUSTER_NAME/prod-source.yaml
        
          echo "- Creating flux kustomization"
          flux create kustomization prod-deployment \
            --source=prod \
            --path="./kustomize" \
            --prune=true \
            --validation=client \
            --interval=5m \
            --export > ./clusters/$CLUSTER_NAME/prod-kustomization.yaml

          echo "- pushing changes to git repo"
          git config --global user.email "dafespinelsa@unal.edu.co"
          git config --global user.name "daespinel"
          if [[ `git status --porcelain` ]]; then
          echo '* changes found'
          git add -A && git commit -m "Add source and kustomization GitRepository"
          git push
          else
          echo '* No changes in folder'
          fi

          echo '- Installing monitoring namespaces'
          kubectl apply -f monitoring/monitoring-namespaces.yaml

          echo '- Installing prometheus'
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm upgrade -i prometheus -f monitoring/prometheus-values.yml prometheus-community/prometheus --version 14.1.0 --namespace kube-monitoring

          echo '- Installing grafana'
          helm repo add grafana https://grafana.github.io/helm-charts
          helm upgrade -i grafana -f monitoring/grafana-values.yml grafana/grafana --version 6.9.1 --namespace kube-monitoring

          echo '- Installing logging namespaces'
          kubectl apply -f logging/kube-logging.yml

          echo '- Creating PersistentVolume'
          kubectl apply -f logging/data-volume-claim.yml

          echo '- Creating Elasticsearch headless service'
          kubectl apply -f logging/elasticsearch-service.yml

          echo '- Creating Elasticsearch statefulset'
          kubectl apply -f logging/elasticsearch-statefulset.yml

          echo '- Creating Kibana service and deployment'
          kubectl apply -f logging/kibana.yml

          echo '- Creating fluentd daemonset'
          kubectl apply -f logging/fluentd.yml
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
        GITHUB_USER: $(GITHUB_USER)
        GITHUB_REPO: $(GITHUB_REPO)
    - task: TerraformTaskV2@2
      displayName: Terraform destroy
      condition: eq(variables.deleteVar, True)
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8s/'
        environmentServiceNameAzureRM: 'Essai gratuit(e66d562c-9e74-47b7-a847-c6d192e8b54b)'
      env:
        TF_VAR_client_id: $(service-principal-appid)
        TF_VAR_client_secret: $(service-principal-password)
