# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
- group: variables-cluster
- name: createVar
  value: $[eq(variables['create-cluster'], 'True')]


trigger:
- master

pool:
  vmImage: ubuntu-latest

stages:
- stage: BuildAKSTerraform
  jobs:
  - job: BuildAKSTerraform
    steps:
    - task: InstallSSHKey@0
      displayName: Installing SSH key
      inputs:
        knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: '$(myPubKey)'
        sshKeySecureFile: 'id_rsa'

    - task: CmdLine@2
      inputs:
        script: 'ls -alh $(System.DefaultWorkingDirectory)'
    - task: TerraformTaskV2@2
      displayName: Terraform init 
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8s/'
        backendServiceArm: 'Essai gratuit(e66d562c-9e74-47b7-a847-c6d192e8b54b)'
        backendAzureRmResourceGroupName: 'TFRresourceGroup'
        backendAzureRmStorageAccountName: 'newdavblob'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV2@2
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8s/'
    - task: TerraformTaskV2@2
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8s/'
        commandOptions: '-out out.plan'
        environmentServiceNameAzureRM: 'Essai gratuit(e66d562c-9e74-47b7-a847-c6d192e8b54b)'
      env:
        TF_VAR_client_id: $(service-principal-appid)
        TF_VAR_client_secret: $(service-principal-password)
    
    - task: TerraformTaskV2@2
      displayName: Terraform apply
      condition: eq(variables.createVar, True)
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8s/'
        commandOptions: 'out.plan'
        environmentServiceNameAzureRM: 'Essai gratuit(e66d562c-9e74-47b7-a847-c6d192e8b54b)'

    - task: TerraformTaskV2@2
      displayName: Terraform destroy
      condition: ne(variables.createVar, True)
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aks-k8S'
        environmentServiceNameAzureRM: 'Essai gratuit(e66d562c-9e74-47b7-a847-c6d192e8b54b)'